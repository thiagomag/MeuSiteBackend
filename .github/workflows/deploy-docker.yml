name: CI/CD Pipeline with Dockerfile

on:
  push:
    branches:
      - master  # Build autom치tico ao enviar c칩digo para a branch "master"
  workflow_dispatch:  # Deploy manual

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout o c칩digo
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configurar o JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v1
        with:
          java-version: '21'

      # Step 3: Build com Gradle usando o JDK 21
      - name: Build with Gradle
        run: chmod +x ./gradlew && ./gradlew build

      # Step 4: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Login no Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 6: Build multi-architecture Docker image
      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          platforms: linux/amd64,linux/arm64

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#    environment: production  # Especifica o environment "production" para este job
#    if: github.event_name == 'workflow_dispatch'  # Executa o deploy apenas manualmente
#
#    steps:
#      # Step 1: Checkout do reposit칩rio
#      - name: Checkout the repository
#        uses: actions/checkout@v2
#
#      # Step 2: Deploy para AWS EC2 via SSH
#      - name: Deploy to AWS EC2 via SSH
#        uses: appleboy/ssh-action@v0.1.5
#        with:
#          host: ${{ secrets.AWS_EC2_HOST }}
#          username: ${{ secrets.AWS_EC2_USER }}
#          key: ${{ secrets.AWS_EC2_KEY }}
#          script: |
#            mkdir -p /home/ubuntu/auth-service
#            cd /home/ubuntu/auth-service
#            docker stop $(docker ps -a -q) || true
#            docker rm $(docker ps -a -q) || true
#            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
#            docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest